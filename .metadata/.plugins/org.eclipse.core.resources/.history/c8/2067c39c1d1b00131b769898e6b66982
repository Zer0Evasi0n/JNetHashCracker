import javax.swing.JFrame;

import java.util.Scanner;

@SuppressWarnings("serial")
public class GUI extends JFrame {
	
	//Other constructors
	public static JobManagement jb;
	@SuppressWarnings("unchecked")
	public GUI() {
		Scanner in = new Scanner(System.in);
		jb = new JobManagement();
		while(true) {
			String inputCommand = in.nextLine();
			String command = inputCommand;
			int number;
			String[] split = inputCommand.split(" ");
			if (split[0].equals("list")) {
				if (Startup.getConnectedNumbers() == 0) {
					out("[JN]: There are no connected clients");
				} else {
					for (int i = 0; i < Startup.clients.size(); i ++) {
						Startup.c = (Client)Startup.clients.get(i);
						if (Startup.c.isConnected()) {
							out("     [#] Client " + Startup.c.cs.getInetAddress().getHostAddress() + " " + Startup.c.clientHashRate + "kH/s" + " || Hashing: " + Startup.c.isCracking);
						}
					}
				}
			} else if (split[0].equals("listener")) {
				split = command.split(" ");
				try {
					if (split[1].equals("add")) {
						try {
							number = Integer.parseInt(split[2]);
							if (!Startup.listeners.contains(number)) {
								Startup.listeners.add(number);
								out("[JN]: Added listener " + number);
								Startup.addListener(number);
							} else {
								out("[JN]: Listener " + number + " already existed");
							}
						} catch (Exception e2) { out("Please use a number as an argument"); }
					} else if (split[1].equals("del")) {
						try {
							number = Integer.parseInt(split[2]);
							if (!Startup.listeners.contains(number)) {
								out("[JN]: Listener " + number + " already existed");
							} else {
								Startup.listeners.remove((Object)number);
								out("[JN]: Deleted listener " + number);
								Startup.delListener(number);
							}
						} catch (Exception e2) { e2.printStackTrace(); out("[JN]: Please use a number as an argument"); }
					} else if (split[1].equals("list")) {
						if (Startup.listeners.size() == 0) {
							System.out.println("There are no listeners");
						} else {
							for (int i = 0; i < Startup.listeners.size(); i ++) {
								out(Startup.listeners.get(i) + "");
							}
						}
					} else {
						out("[JN]: Accepted arguments for listener (add|del|list) number");
					}
				} catch (Exception e2) { out("[JN]: Accepted arguments for listener (add|del|list) number"); }
			} else if (split[0].equals("rate")) {
				out(Startup.getHashRate() + "kH/s");
			} else if (split[0].equals("stop")) {
				Startup.stopCracking();
			} else if (split[0].equals("crack")) {
				try {
					if (!Startup.cracking) {
						//String arguments = command.replaceAll(split[1], "");
						Startup.currentHashString = split[1];
						Startup.array = Startup.comblist;
					}
					jb.resetStart();
					Startup.startCracking();
				} catch (Exception e2) {
					out("[JN]: crack (hash)");
				}
			}
			else if (split[0].equals("status")) {
				if (Startup.cracking) {
					out("[JN]: Solving " + " @" + Startup.getHashRate() + "kH/s for " + (Float.valueOf(System.currentTimeMillis() - Startup.initiateTime)/1000F) + "sec");
				} else {
					out("[JN]: Not solving a hash");
				}
			}
			else if (split[0].equals("help")) {
				out("[JN]:  ==============[J-Net Commands]===============");
				out("> listener (add|del|list) number - adds a port to listen");
				out("> rate - retrieves hash rate (kH/s)");
				out("> crack (hash) (start length)");
				out("> list - lists connected clients");
				out("> stop - stops cracking");
				out("> status - gives a status on the current crack");
			} else {
				out("[JN]: Unknown command. Try help");
			}
		}
	}
		
	public static void out(String output) {
		System.out.println(output);
	}
	
	public static void update() {
		for (int i = 0; i < Startup.clients.size(); i ++) {
			Startup.c = (Client)Startup.clients.get(i);
			if (Startup.c.isConnected()) {
			}
		}
	}
}